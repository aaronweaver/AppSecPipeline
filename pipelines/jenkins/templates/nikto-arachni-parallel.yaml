- job:
    name: Nikto_Arachni_Parallel_1
    display-name: AppSec Pipeline - Nikto and Arachni Parallel
    project-type: pipeline
    concurrent: true
    parameters:
    - string:
        name: PROFILE
        default: "fast"
        description: "Profile to run for security tools."
    - string:
        name: URL
        default: "http://www.testfire.net"
        description: "Site to scan for dynamic scans."
    sandbox: true
    dsl: |
       class AppSecPipeline {
            String name
            String command

            AppSecPipeline(name, command) {
                this.name = name
                this.command = command
            }
        }

        def nikto = new AppSecPipeline("nikto", "launch.py -t nikto -p $PROFILE URL=$params.URL")
        def arachni = new AppSecPipeline("arachni", "launch.py -t arachni -p $PROFILE URL=$params.URL")

        def stepsForParallel = [:]
        stepsForParallel[nikto.name] = transformIntoStep(nikto.name, nikto.command)
        stepsForParallel[arachni.name] = transformIntoStep(arachni.name, arachni.command)

        parallel stepsForParallel
        singleStage("Dojo Ending")

        def transformIntoStep(stageName, inputString) {
            return {
                node {
                    stage(stageName)
                    {
                        docker.image('appsecpipeline/base-tools').inside() {
                            echo 'Current Working Directory:'
                            sh "pwd"
                            sh inputString
                            sh 'touch reports/' + stageName + '/test'
                        }
                    }
                    stash includes: 'reports/' + stageName + '/*', name: stageName
                }
            }
        }

        def singleStage(stageName)
        {
            node {
                    dir('reports') {
                        unstash 'nikto'
                        unstash 'arachni'
                    }
                    stage(stageName)
                    {
                        docker.image('appsecpipeline/base').inside() {
                            sh "echo 'ending!'"
                            sh "echo 'Current Working Directory'"
                            sh "pwd"
                        }
                    }
            }
        }
